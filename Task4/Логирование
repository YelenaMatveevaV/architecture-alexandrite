Архитектурное решение по логированию

1. Описание логов движения заказа
Internet Shop, CRM, MES
  Логирование операций приложения на уровне интерфейса - INFO
  Логирование обращений и ответов в API - INFO, ERROR
  Логирование исключений - WARNING, ERROR
  
  В логе обязательно указание: даты-времени, номера заказа, код ответа, операция, система-ответчик, уровень лога, пользователь ...

Shop API, CRM API, MES API
  Логирование обращения в API - INFO
  Логирование ответа на обращение в API - INFO, ERROR
  Логирование исключений - WARNING, ERROR
  Если есть логика на уровне API, то логирование ключевых операций
  
  В логе обязательно указание: даты-времени, номера заказа, системы инициатора, код ответа, система-ответчик, уровень лога, пользователь ...

Shop DB 
  Настройка структурированных логов по формату JSON. 
  Уровень логов WARNING

MES db
  Настройка структурированных логов по формату JSON. 
  Уровень логов INFO (Возможно повышение уровня до DEBUG в зависимости от выявленных источников проблем)

Messages Queue
  Настройка структурированных логов по формату JSON. 
  Уровень логов WARNING

S3-based storage  
  Формат обычно не настраивается.


2. Мотивация
Логи являются следом выполнения операций и необходимы для отслеживания пути заказа в системе и между системами.
Сведения логов являются источником сведений для настройки мониторинга.
Генерация логов обычно обеспечивается самим приложением. 
С помощью решения по трейсингу возможно собрать обращения между системами и добавить к сведениям по логам систем. 
Это все позволит максимально подробно отследить путь заказа и выявить проблему.


3. Предлагаеме решение
В текущей архитеутре уже есть системы для логирования и анализа логов:
- Loki - система сбора и хранения логов, интегрируется с grafana
- Linkerd - истсема сбора сведений по трейсам
- Jaeger - система анализа сведений по трейсам между системами, позволяет отслелить путь запроса через все компоненты
- Grafana - интерфейс для анализа логов, метрик и трейсов

Архитектура представлена в скрипте pluntuml файла "Component_diagram_tobe_2".

4. Мероприятия по превращению системы сбора логов в систему анализа логов
Мероприятия:
1) Настройка интеграции между системами логирования, трейсинга и мониторинга
2) Настройка дашбордов и перехода к источникам сведений
3) Настройка алертов:
   - соотношение неуспешных запросов к успешным более 5% по 500 ошибкам, по 400 ошибкам
   - настройка временной блокировки пользователя mes api, который генерирует запросы с кодом ошибки 400
   - настройка скрипта перезапуска систем в случае падения систем
   - настройка уведомлений при достижении критических значений по уровням метрик мониторинга


5. Критерии выбора технологии работы с логами

1) Лицензия
      Описание: Тип лицензии (открытый исходный код или проприетарная)
      Важность : Влияет на стоимость владения, доступность обновлений и возможность модификации.

      ELK STACK       Elastic License
      OPENSEARCH      Apache License, Version 2.0
      SPLUNK          Проприетарная
      LOKI            Apache License, Version 2.0

2) Стоимость
      Описание : Стоимость использования решения (бесплатные версии, коммерческие лицензии, поддержка)
      Важность : Особенно важна для компаний с ограниченным бюджетом

      ELK STACK       Бесплатная для Elasticsearch и Kibana, платная для Logstash
      OPENSEARCH      Бесплатная
      SPLUNK          Платная
      LOKI            Бесплатная

3) Масштабируемость
      Описание : Возможность горизонтального масштабирования и работа с большими объемами данных
      Важность : Критично для систем с высокой нагрузкой

      ELK STACK       Высокая (поддерживает распределенные системы)
      OPENSEARCH      Высокая (совместима с Elasticsearch)
      SPLUNK          Высокая (специализированное решение для больших объемов данных)
      LOKI            Высокая (оптимизирована для Kubernetes)

4) Функциональность анализа
      Описание : Наличие возможностей для анализа, визуализации и корреляции данных.
      Важность : Необходимо для глубокого понимания событий и выявления проблем

      ELK STACK       Средняя (Kibana предоставляет базовые возможности визуализации)
      OPENSEARCH      Средняя (встроенные средства анализа)
      SPLUNK          Высокая (продвинутые инструменты анализа и машинного обучения)
      LOKI            Ограниченная (логи анализируются через Grafana)

5) Поддержка сообщества и экосистема
      Описание : Размер сообщества, наличие документации, плагинов и интеграций
      Важность : Важно для быстрого развертывания и поддержки

      ELK STACK       Активное сообщество, богатая экосистема
      OPENSEARCH      Активное сообщество, совместимость с Elasticsearch
      SPLUNK          Ограниченное сообщество, но надежная поддержка от компании
      LOKI            Активное сообщество, тесная интеграция с Grafana

6) Интеграция с существующей инфраструктурой
      Описание : Легкость интеграции с другими системами мониторинга (например, Prometheus, Grafana).
      Важность : Особенно важно при наличии уже работающей инфраструктуры

      ELK STACK       Хорошая интеграция с Kubernetes, Prometheus и Grafana
      OPENSEARCH      Совместимость с Elasticsearch, хорошая интеграция с Kubernetes
      SPLUNK          Сложная интеграция с открытыми инструментами
      LOKI            Отличная интеграция с Grafana и Kubernetes

7) Производительность
      Описание : Скорость обработки и индексации данных  
      Важность : Критично для реального времени и больших объемов данных

      ELK STACK       Высокая (при правильной настройке)
      OPENSEARCH      Высокая (совместима с Elasticsearch)
      SPLUNK          Высокая (специализированное решение для больших объемов данных)
      LOKI            Высокая (оптимизирована для работы с метками и неиндексированными данными)

8) Обучаемость и сложность внедрения
      Описание : Уровень сложности настройки и использования
      Важность : Важно для команд с ограниченными ресурсами

      ELK STACK       Средняя сложность (Logstash требует настройки)
      OPENSEARCH      Средняя сложность (совместима с Elasticsearch)
      SPLUNK          Высокая сложность (специфичный интерфейс и конфигурация)
      LOKI            Низкая сложность (простая настройка и интеграция с Grafana)
       