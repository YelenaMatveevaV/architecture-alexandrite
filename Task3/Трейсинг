Архитектурное решение по трейсингу

1. Мотивация
Производство заказов очень важно для показателей деятельности организации.
В течение длительного времени команда не справилась с поиском причин проблем потерь заказов имеющимися средствами.
Трейсинг является инструментом для поиска и устранения проблем взаимодействия сервисов.

2. Предлагаемое решение
Варианты организации трейсинга по приоритету:
1) использование возможностей платформы систем, фреймворков в части поддержки Open Telemetry и т.п. и их интеграция с системами сбора и визуализации
2) внедрение через service-mesh (Istio, Linkerd), который автоматически собирает и передаёт трейсы сетевого взаимодействия между сервисами без изменения кода
3) изменение кода систем для внедрения OpenTelemetry или переход на фреймворки, поддерживающие библиотеку

Схема внедрения трейсинга с помощью Service Mesh отражена в файле "Component_diagram_tobe", все новые элементы в комментарии имеют постфикс "_new".
Возможно комбинированное итоговое решение, но для этого необходимо больше сведений о компонентах.

3. Компромиссы
Предлагаю искать вариант максимально с zero-code в части отслеживания вызовов, т.к. возможны ошибки реализации и это длительное мероприятие.
Компромисс в части длительности хранения сведений трейсинга, возможно это будет несколько дней.

4. Аспекты безопасности
Для предотвращения несанкционированного доступа к системе трейсинга необходимо внедрить многоуровневую защиту, включающую аутентификацию, авторизацию, шифрование, сетевое разделение и мониторинг. 
1). Аутентификация
Цель : Убедиться, что только авторизованные пользователи могут получить доступ к системе трейсинга.
Меры :
-Использование корпоративных систем аутентификации, таких как OAuth2, OpenID Connect или SAML, для интеграции с Active Directory или LDAP.
-Многофакторная аутентификация для входа в систему трейсинга, например двухэтапная.
-Доступ к системе трейсинга только сотрудникам с определенными ролями, 
Например:
"Администратор" — полный доступ к системе.
"Поддержка" — доступ только к чтению трейсов.
"Аналитик" — доступ к анализу данных без возможности изменения конфигурации.

2). Авторизация
Цель : Ограничить доступ к данным трейсинга в зависимости от роли пользователя.
Меры :
-Разграничение прав на основе ролей: администраторы, аналитики, поддержка.
-Настройка доступа к конкретным сервисам или микросервисам для разных групп пользователей.
-Скрыть или маскировать чувствительные данные (например, личные данные клиентов) в трейсах.

3). Шифрование
Цель : Защитить данные при передаче и хранении.
Меры :
-Настройка TLS для всех взаимодействий с системой трейсинга (HTTPS для UI и API).
-Использование шифрования на уровне диска или базы данных системы трейсинга.
-Хранение ключей шифрования и учетных данных в безопасных хранилищах, таких как HashiCorp Vault или AWS Secrets Manager.

4). Контроль доступа
Цель : Обеспечить, чтобы доступ к системе трейсинга был ограничен только доверенными источниками.
Меры :
-Разместить систему трейсинга в изолированной сети (например, внутренней подсети Kubernetes).
-Настроить правила брандмауэра для ограничения доступа только с определенных IP-адресов или сетей.
-Настройте Ingress и Egress контроллеры в Kubernetes для ограничения доступа к системе трейсинга.
-Если доступ требуется извне, то использовать VPN или Zero Trust модели для безопасного подключения.

5). Мониторинг и аудит
Цель : Выявлять подозрительную активность и предотвращать несанкционированный доступ.
Меры :
-Включить логирование всех попыток входа и действий в системе трейсинга.
-Использовать SIEM-системы (например, Splunk, ELK) для анализа логов и выявления аномалий.
-Настроить уведомления для администраторов при обнаружении подозрительных действий (например, многочисленные неудачные попытки входа).

6). Дополнительные меры:
-Регулярно создавать резервные копии данных трейсинга и защищать их.
-Регулярно обновлять систему трейсинга и связанные компоненты для устранения уязвимостей.
-Если доступ к системе трейсинга требуется временно (например, для внешних партнеров), настраивать временные учетные записи с автоматическим отключением после завершения задачи.

Эти меры помогут защитить данные трейсинга как внутри компании, так и при необходимости предоставления доступа извне.

5. Автоматический мониторинг процесса прохождения заказа
Процесс прохождения заказа можно организовать и поддержать системой BPM, в этом случае видны все стадии заказа между системами.

Мониторинг процесса прохождения заказа можно организовать следующим образом:

1). Отслеживать ключевые этапы заказа :
а) Создание заказа.
     Обработка заказа (например, расчет цены, назначение оператора).
     Завершение заказа (например, отправка продукта клиенту).
б) Обнаруживать проблемы :
     Задержки на каком-либо этапе.
     Ошибки или сбои в обработке заказов.
     Высокая нагрузка на сервисы.
в) Уведомлять команду поддержки :
     При возникновении критических проблем (например, заказ не завершен за установленное время).

Ключевые метрики для мониторинга

a) Производительность
     Время выполнения этапов :
        order_creation_time: Время создания заказа.
        order_processing_time: Время обработки заказа.
        order_completion_time: Время завершения заказа.
     Задержки :
        latency_between_services: Задержки между взаимодействием микросервисов.
     Частота ошибок :
        error_rate_per_service: Процент ошибок на каждом этапе.
b) Состояние заказов
     Количество заказов :
        total_orders_created: Общее количество созданных заказов.
        orders_in_progress: Количество заказов в обработке.
        orders_completed: Количество завершенных заказов.
        orders_failed: Количество неудачных заказов.
     Прогресс заказов :
        order_status_distribution: Распределение заказов по статусам (например, "новый", "в обработке", "завершен").
c) Нагрузка на систему
     Загрузка сервисов :
        requests_per_second: Количество запросов в секунду.
        service_cpu_usage: Использование CPU микросервисами.
        service_memory_usage: Использование памяти микросервисами.

Архитектура мониторинга и алертинга

a) Сбор данных трейсинга выполняется с помощью Jaeger, который собирает трейсы из всех микросервисов через Linkerd, экспортирует метрики в Prometheus.
b) Сбор метрик выполняется с помощью Prometheus.
c) Для настройки алертинга в архитектуру добавляется Alertmanager, который настроен на отправку уведомлений при обнаружении проблем, интегрирован с каналами уведомлений (например, Slack, Email, PagerDuty).
d) Для визуализации в архитектуру добавляется Grafana, в которой будут настроены дашборды для мониторинга ключевых метрик.

Решение в виде диаграммы представлено в файле "Component_diagram_tobe_2", в котором добавлен блок "' Системы автоматического мониторинга процесса прохождения заказа_new"
