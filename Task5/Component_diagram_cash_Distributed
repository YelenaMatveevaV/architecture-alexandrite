Объяснение изменений

1. Замена Redis Cache на Redis Cluster :
     Вместо одного экземпляра Redis (Redis Cache) добавлен Redis Cluster .
     Redis Cluster представляет собой распределенную систему, состоящую из нескольких узлов, которые хранят данные в виде шардов (shards).
2. Горизонтальное масштабирование :
     Redis Cluster позволяет легко масштабировать кэширование, добавляя новые узлы для увеличения объема памяти и пропускной способности.
3. Отказоустойчивость :
     Redis Cluster автоматически реплицирует данные между узлами, что обеспечивает отказоустойчивость. Если один узел выходит из строя, данные остаются доступными на других узлах.
4. Распределение данных :
     Данные автоматически распределяются между узлами Redis Cluster с использованием механизма hash slotting (например, ключи распределяются по 16384 слотам).
5. Интеграция с микросервисами :
     Микросервисы (Shop API, CRM API, MES API) взаимодействуют с Redis Cluster так же, как с обычным Redis, но теперь они могут работать с распределенными данными.
6. Пример использования :
     При запросе списка заказов:
          MES API проверяет Redis Cluster.
          Если данных нет, он запрашивает их из MES DB, сохраняет результат в Redis Cluster и возвращает его клиенту.
     При изменении статуса заказа:
          MES API обновляет статус в MES DB.
          После успешной записи он инвалидирует соответствующие записи в Redis Cluster.
7. Преимущества Distributed Caching (Redis Cluster)
     Масштабируемость :
          Redis Cluster позволяет легко масштабировать кэширование, добавляя новые узлы.
     Высокая производительность :
          Распределенная архитектура снижает нагрузку на каждый узел и обеспечивает высокую скорость чтения/записи.
     Отказоустойчивость :
          Автоматическая репликация данных между узлами гарантирует, что система продолжит работать даже при выходе из строя одного или нескольких узлов.
     Гибкость :
          Redis Cluster поддерживает различные типы данных (строки, хэши, списки) и механизмы истечения времени жизни (TTL).
8. Недостатки Distributed Caching (Redis Cluster)
     Сложность настройки :
          Настройка Redis Cluster требует больше усилий, чем использование одиночного экземпляра Redis.
     Задержки при переключении :
          При выходе из строя узла может возникнуть небольшая задержка при переключении на реплику.
     Ограничения на транзакции :
          Redis Cluster не поддерживает транзакции между разными шардами.

Заключение
Стратегия Distributed Caching с использованием Redis Cluster идеально подходит для систем, где требуется высокая производительность, масштабируемость и отказоустойчивость. Она позволяет эффективно работать с большими объемами данных и обеспечивает гибкость для будущего роста.