Объяснение изменений


1. Добавление Materialized Views :
     Для каждой базы данных (Shop DB, MES DB) добавлен компонент Materialized View , который хранит предварительно вычисленные результаты часто запрашиваемых запросов.
     Например, Materialized View может содержать список заказов с их статусами или другие агрегированные данные.
2. Обновление Materialized Views :
     Когда данные изменяются в базе данных (например, при создании или обновлении заказа), Materialized View автоматически обновляется.
     Обновление может происходить:
          По расписанию (например, каждые 5 минут).
          При изменении данных в исходных таблицах (если поддерживается базой данных).
3. Использование Materialized Views :
     Микросервисы (Shop API, CRM API, MES API) запрашивают данные из Materialized View вместо выполнения сложных запросов к базе данных.
     Это снижает нагрузку на базу данных и ускоряет доступ к данным.
4. Пример использования :
     При запросе списка заказов:
          MES API проверяет Materialized View.
          Если данные актуальны, они возвращаются немедленно.
     При изменении статуса заказа:
          MES API обновляет статус в MES DB.
          После успешной записи Materialized View обновляется автоматически.
5. Преимущества Materialized Views
     Высокая производительность чтения :
          Данные уже предварительно вычислены, что позволяет быстро возвращать результаты.
     Снижение нагрузки на базу данных :
          Сложные запросы выполняются только при обновлении Materialized View, а не при каждом запросе.
     Простота реализации :
          Materialized View поддерживается большинством современных баз данных (например, PostgreSQL, MySQL, Oracle).
     Гибкость :
          Можно создавать Materialized View для различных типов запросов (например, агрегированные данные, фильтрованные списки).
6. Недостатки Materialized Views
     Задержка обновления :
          Если Materialized View обновляется по расписанию, данные могут быть неактуальными в момент запроса.
     Дополнительное место в базе данных :
          Materialized View занимает дополнительное место для хранения предварительно вычисленных данных.
     Ограниченная масштабируемость :
          Materialized View работает внутри одной базы данных и не подходит для распределенных систем.


Заключение
Стратегия кеширования через Materialized Views идеально подходит для систем, где важно минимизировать задержки при чтении данных и снизить нагрузку на базу данных. Она проста в реализации и эффективна для часто запрашиваемых данных.