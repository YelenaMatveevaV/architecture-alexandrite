Объяснение изменений

1. Добавление Cache-Aside логики :
     При запросе данных микросервисы (Shop API, CRM API, MES API) сначала проверяют Redis Cache.
     Если данные есть в кэше, они возвращаются немедленно.
     Если данных нет, микросервис выполняет запрос к базе данных (Shop DB, MES DB), сохраняет результат в Redis Cache и возвращает его клиенту.
2. Поток данных для чтения :
     Микросервис проверяет Redis Cache.
     Если данных нет, он запрашивает их из базы данных.
     После получения данных из базы данных микросервис сохраняет их в Redis Cache.
3. Поток данных для записи :
     При изменении данных (например, обновлении статуса заказа) микросервис записывает изменения в базу данных.
     После успешной записи микросервис инвалидирует соответствующие записи в Redis Cache.
4. Пример использования :
     При запросе списка заказов:
          MES API проверяет Redis Cache.
          Если данных нет, он запрашивает список заказов из MES DB, сохраняет результат в Redis Cache и возвращает его клиенту.
     При изменении статуса заказа:
          MES API обновляет статус в MES DB.
          После успешной записи он инвалидирует кэш для списка заказов в Redis Cache.
5. Преимущества Cache-Aside
     Простота реализации :
          Логика кэширования реализуется на уровне микросервисов, что делает её легкой для внедрения.
     Гибкость :
          Кэш заполняется только при необходимости, что экономит ресурсы Redis.
     Минимальная задержка при чтении :
          Часто запрашиваемые данные берутся из Redis, что снижает нагрузку на базу данных.
6. Недостатки Cache-Aside
     Задержка при первом запросе :
          Первый запрос к данным, которых нет в кэше, требует обращения к базе данных.
     Риск несогласованности :
          Если данные в базе данных изменяются, но кэш не инвалидируется, могут возникнуть проблемы с актуальностью данных.
     Необходимость инвалидации кэша :
          Требуется дополнительная логика для очистки кэша при изменении данных.


Заключение
Стратегия Cache-Aside идеально подходит для систем, где важно минимизировать нагрузку на базу данных, но допустимы небольшие задержки при первом запросе данных. Она проста в реализации и гибка, но требует внимательного управления инвалидацией кэша.