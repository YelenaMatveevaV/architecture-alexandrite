Объяснение изменений


1. Добавление Cache Subscriber :
     Добавлен новый компонент Cache Subscriber, который подписывается на события из очереди сообщений (Messages Queue).
     При получении события (например, о создании или изменении заказа) Cache Subscriber обновляет соответствующие данные в Redis Cluster.
2. Event-Driven логика :
     Когда данные изменяются (например, статус заказа), микросервисы публикуют событие в Messages Queue.
     Cache Subscriber реагирует на событие и обновляет Redis или Redis Cluster, чтобы гарантировать актуальность кэша.
3. Распределенное кэширование :
     Вместо одного экземпляра Redis может использоваться Redis Cluster , что обеспечит масштабируемость и отказоустойчивость.
4. Пример использования :
     При создании нового заказа:
          Shop API сохраняет данные в базу данных (Shop DB) и публикует событие в Messages Queue.
          Cache Subscriber получает событие и обновляет Redis или Redis Cluster.
     При запросе списка заказов:
          MES API проверяет Redis или Redis Cluster.
          Если данных нет, он запрашивает их из MES DB.
5. Преимущества Event-Driven Caching
     Гарантированная доставка событий :
          Использование очереди сообщений (например, RabbitMQ) гарантирует, что события будут доставлены и обработаны.
     Минимальная задержка :
          Кэш обновляется практически в реальном времени после изменения данных.
     Масштабируемость :
          Redis Cluster позволяет легко масштабировать кэширование, добавляя новые узлы.
     Отказоустойчивость :
          Автоматическая репликация данных между узлами Redis Cluster гарантирует, что система продолжит работать даже при выходе из строя одного или нескольких узлов.
6. Недостатки Event-Driven Caching
     Сложность реализации :
          Требуется дополнительный компонент (Cache Subscriber) для обработки событий.
     Задержки при обработке событий :
          Обновление кэша может занять немного больше времени, чем при прямом взаимодействии с Redis.
     Зависимость от очереди сообщений :
          Если очередь сообщений выходит из строя, кэш может временно не обновляться.


Заключение
Стратегия Event-Driven Caching с использованием Redis Cluster идеально подходит для систем, где важно минимизировать задержки при обновлении данных и обеспечивать высокую производительность. Она позволяет эффективно работать с большими объемами данных и обеспечивает гибкость для будущего роста.