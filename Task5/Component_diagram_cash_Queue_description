Объяснение изменений

1. Добавление Message Cache Subscriber :
     Внедрен новый компонент Message Cache Subscriber, который подписывается на сообщения из очереди RabbitMQ.
     При получении сообщения он сохраняет его состояние или результат обработки в Redis Cache.
2. Кэширование состояний/результатов сообщений :
     Redis Cache используется для хранения состояний сообщений (например, статус обработки) или результатов их обработки.
     Это позволяет избежать повторной обработки одинаковых сообщений и ускорить реакцию сервисов.
3. Использование кэша микросервисами :
     Микросервисы (MES API, CRM API) проверяют Redis Cache перед обработкой сообщений.
     Если результат уже закэширован, они используют его вместо выполнения повторной обработки.
4. Пример использования :
     При получении сообщения о новом заказе:
          Message Cache Subscriber сохраняет состояние сообщения в Redis Cache.
     При запросе обработки сообщения:
          MES API проверяет Redis Cache. Если результат уже есть, он возвращает его немедленно.
          Если результата нет, выполняется полная обработка, и результат сохраняется в Redis Cache.
5. Преимущества нового решения
     Устранение повторной обработки :
          Кэширование результатов обработки сообщений позволяет избежать дублирования работы.
     Ускорение реакции сервисов :
          Микросервисы могут быстро получать результаты из Redis Cache, что снижает задержки.
     Снижение нагрузки на RabbitMQ :
          Сокращается количество повторных запросов к очереди сообщений.
     Гибкость :
          Кэширование может быть настроено для различных типов сообщений и их состояний.
6. Недостатки нового решения
     Задержка при обновлении :
          Если состояние сообщения изменяется, кэш должен быть своевременно инвалидирован.
     Дополнительные ресурсы :
          Redis Cache требует дополнительных ресурсов для хранения состояний и результатов.
     Сложность реализации :
          Требуется дополнительный компонент (Message Cache Subscriber) для управления кэшированием.


Заключение
Решение с кешированием очереди сообщений RabbitMQ идеально подходит для систем, где важно минимизировать задержки и избежать повторной обработки. Оно позволяет эффективно использовать ресурсы и обеспечивает высокую производительность.