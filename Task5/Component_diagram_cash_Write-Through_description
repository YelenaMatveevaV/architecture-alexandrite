Объяснение изменений

1. Добавление Write-Through логики :
     При записи данных (например, создании или обновлении заказа) микросервисы (Shop API, CRM API, MES API) одновременно записывают данные в Redis Cache и в соответствующую базу данных (Shop DB, MES DB).
     Это гарантирует, что кэш всегда содержит актуальные данные.
2. Поток данных для записи :
     Микросервис отправляет данные в Redis Cache.
     Redis Cache передает данные в базу данных.
     База данных подтверждает успешную запись, и Redis Cache обновляет свои данные.
3. Пример использования :
     При изменении статуса заказа:
          MES API записывает новый статус в Redis Cache.
          Redis Cache записывает данные в MES DB.
          После подтверждения записи MES DB Redis Cache обновляет свои данные.
4. Чтение данных :
     При запросе данных микросервис сначала проверяет Redis Cache.
     Если данные есть в кэше, они возвращаются немедленно.
     Если данных нет, запрос перенаправляется в базу данных.
5. Преимущества Write-Through
     Актуальность данных :
          Кэш всегда содержит актуальные данные, так как они обновляются одновременно с базой данных.
     Упрощение инвалидации :
          Нет необходимости вручную инвалидировать кэш при изменении данных.
     Снижение нагрузки на базу данных :
          Часто запрашиваемые данные берутся из Redis, что снижает количество запросов к базе данных.
6. Недостатки Write-Through
     Задержка при записи :
          Запись данных занимает больше времени, так как требуется обновить и базу данных, и кэш.
     Увеличение сложности :
          Необходимо реализовать логику синхронизации между кэшем и базой данных.

Заключение
Стратегия Write-Through идеально подходит для систем, где важно гарантировать актуальность данных в кэше. Она добавляет дополнительные шаги при записи данных, но устраняет необходимость в ручной инвалидации кэша.